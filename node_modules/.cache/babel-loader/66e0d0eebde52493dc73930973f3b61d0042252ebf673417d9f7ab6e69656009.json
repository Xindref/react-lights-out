{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dako\\\\Documents\\\\Springboard\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // creates an array of arrays using the row, column, and chance props\n    const initialBoard = Array.from({\n      length: nrows\n    }, () => Array.from({\n      length: ncols\n    }, () => Math.random() < chanceLightStartsOn));\n\n    // return initial board to render\n    return initialBoard;\n  }\n  function hasWon() {\n    // if every cell in the board is false, you win\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    // sets what our board looks like right now\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // makes new copy of board using oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // flips all the adjacent cells of where we click\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the new board to render\n      return boardCopy;\n    });\n  }\n  if (hasWon()) {\n    // if we win, only render \"You won!\"\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-win\",\n      children: \"You won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 12\n    }, this);\n  }\n\n  // this is the table for our game, maps over board to generate\n  const table = board.map((row, y) =>\n  /*#__PURE__*/\n  // set key as Y coord for every row we map to our board\n  _jsxDEV(\"tr\", {\n    children: row.map((cell, x) => {\n      const coord = `${y}-${x}`;\n      return (\n        /*#__PURE__*/\n        // for each cell we key the coord it is at on the board\n        // and pass through our props and function to flip cells\n        _jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAroundMe: () => flipCellsAround(coord)\n        }, coord, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      );\n    })\n  }, y, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this));\n  return (\n    /*#__PURE__*/\n    // return our table to render out our inital game\n    _jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: table\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","Array","from","length","Math","random","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","table","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["C:/Users/Dako/Documents/Springboard/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // creates an array of arrays using the row, column, and chance props\n    const initialBoard = Array.from({ length: nrows }, () =>\n      Array.from({ length: ncols }, () => Math.random() < chanceLightStartsOn)\n    );\n\n    // return initial board to render\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // if every cell in the board is false, you win\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    // sets what our board looks like right now\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // makes new copy of board using oldBoard\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // flips all the adjacent cells of where we click\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the new board to render\n      return boardCopy;\n    });\n  }\n\n  if (hasWon()) {\n    // if we win, only render \"You won!\"\n    return <div className=\"Board-win\">You won!</div>;\n  }\n\n  // this is the table for our game, maps over board to generate\n  const table = board.map((row, y) => (\n    // set key as Y coord for every row we map to our board\n    <tr key={y}>\n      {row.map((cell, x) => {\n        const coord = `${y}-${x}`;\n        return (\n          // for each cell we key the coord it is at on the board\n          // and pass through our props and function to flip cells\n          <Cell\n            key={coord}\n            isLit={cell}\n            flipCellsAroundMe={() => flipCellsAround(coord)}\n          />\n        );\n      })}\n    </tr>\n  ));\n\n  return (\n    // return our table to render out our inital game\n    <table className=\"Board\">\n      <tbody>{table}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}